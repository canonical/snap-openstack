package database

// The code below was generated by lxd-generate - DO NOT EDIT!

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"net/http"
	"strings"

	"github.com/canonical/lxd/lxd/db/query"
	"github.com/canonical/lxd/shared/api"
	"github.com/canonical/microcluster/v2/cluster"
)

var _ = api.ServerEnvironment{}

var storageBackendObjects = cluster.RegisterStmt(`
SELECT storage_backends.id, storage_backends.name, storage_backends.type, storage_backends.config, storage_backends.principal, storage_backends.model_uuid
  FROM storage_backends
  ORDER BY storage_backends.name
`)

var storageBackendObjectsByName = cluster.RegisterStmt(`
SELECT storage_backends.id, storage_backends.name, storage_backends.type, storage_backends.config, storage_backends.principal, storage_backends.model_uuid
  FROM storage_backends
  WHERE ( storage_backends.name = ? )
  ORDER BY storage_backends.name
`)

var storageBackendObjectsByType = cluster.RegisterStmt(`
SELECT storage_backends.id, storage_backends.name, storage_backends.type, storage_backends.config, storage_backends.principal, storage_backends.model_uuid
  FROM storage_backends
  WHERE ( storage_backends.type = ? )
  ORDER BY storage_backends.name
`)

var storageBackendObjectsByPrincipal = cluster.RegisterStmt(`
SELECT storage_backends.id, storage_backends.name, storage_backends.type, storage_backends.config, storage_backends.principal, storage_backends.model_uuid
  FROM storage_backends
  WHERE ( storage_backends.principal = ? )
  ORDER BY storage_backends.name
`)

var storageBackendObjectsByModelUUID = cluster.RegisterStmt(`
SELECT storage_backends.id, storage_backends.name, storage_backends.type, storage_backends.config, storage_backends.principal, storage_backends.model_uuid
  FROM storage_backends
  WHERE ( storage_backends.model_uuid = ? )
  ORDER BY storage_backends.name
`)

var storageBackendID = cluster.RegisterStmt(`
SELECT storage_backends.id FROM storage_backends
  WHERE storage_backends.name = ?
`)

var storageBackendCreate = cluster.RegisterStmt(`
INSERT INTO storage_backends (name, type, config, principal, model_uuid)
  VALUES (?, ?, ?, ?, ?)
`)

var storageBackendDeleteByName = cluster.RegisterStmt(`
DELETE FROM storage_backends WHERE name = ?
`)

var storageBackendUpdate = cluster.RegisterStmt(`
UPDATE storage_backends
  SET name = ?, type = ?, config = ?, principal = ?, model_uuid = ?
 WHERE id = ?
`)

// storageBackendColumns returns a string of column names to be used with a SELECT statement for the entity.
// Use this function when building statements to retrieve database entries matching the StorageBackend entity.
func storageBackendColumns() string {
	return "storage_backends.id, storage_backends.name, storage_backends.type, storage_backends.config, storage_backends.principal, storage_backends.model_uuid"
}

// getStorageBackends can be used to run handwritten sql.Stmts to return a slice of objects.
func getStorageBackends(ctx context.Context, stmt *sql.Stmt, args ...any) ([]StorageBackend, error) {
	objects := make([]StorageBackend, 0)

	dest := func(scan func(dest ...any) error) error {
		s := StorageBackend{}
		err := scan(&s.ID, &s.Name, &s.Type, &s.Config, &s.Principal, &s.ModelUUID)
		if err != nil {
			return err
		}

		objects = append(objects, s)

		return nil
	}

	err := query.SelectObjects(ctx, stmt, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"storage_backends\" table: %w", err)
	}

	return objects, nil
}

// getStorageBackendsRaw can be used to run handwritten query strings to return a slice of objects.
func getStorageBackendsRaw(ctx context.Context, tx *sql.Tx, sql string, args ...any) ([]StorageBackend, error) {
	objects := make([]StorageBackend, 0)

	dest := func(scan func(dest ...any) error) error {
		s := StorageBackend{}
		err := scan(&s.ID, &s.Name, &s.Type, &s.Config, &s.Principal, &s.ModelUUID)
		if err != nil {
			return err
		}

		objects = append(objects, s)

		return nil
	}

	err := query.Scan(ctx, tx, sql, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"storage_backends\" table: %w", err)
	}

	return objects, nil
}

// GetStorageBackends returns all available StorageBackends.
// generator: StorageBackend GetMany
func GetStorageBackends(ctx context.Context, tx *sql.Tx, filters ...StorageBackendFilter) ([]StorageBackend, error) {
	var err error

	// Result slice.
	objects := make([]StorageBackend, 0)

	// Pick the prepared statement and arguments to use based on active criteria.
	var sqlStmt *sql.Stmt
	args := []any{}
	queryParts := [2]string{}

	if len(filters) == 0 {
		sqlStmt, err = cluster.Stmt(tx, storageBackendObjects)
		if err != nil {
			return nil, fmt.Errorf("Failed to get \"storageBackendObjects\" prepared statement: %w", err)
		}
	}

	for i, filter := range filters {
		if filter.Type != nil && filter.Name == nil && filter.Principal == nil && filter.ModelUUID == nil {
			args = append(args, []any{filter.Type}...)
			if len(filters) == 1 {
				sqlStmt, err = cluster.Stmt(tx, storageBackendObjectsByType)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"storageBackendObjectsByType\" prepared statement: %w", err)
				}

				break
			}

			query, err := cluster.StmtString(storageBackendObjectsByType)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"storageBackendObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.Principal != nil && filter.Name == nil && filter.Type == nil && filter.ModelUUID == nil {
			args = append(args, []any{filter.Principal}...)
			if len(filters) == 1 {
				sqlStmt, err = cluster.Stmt(tx, storageBackendObjectsByPrincipal)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"storageBackendObjectsByPrincipal\" prepared statement: %w", err)
				}

				break
			}

			query, err := cluster.StmtString(storageBackendObjectsByPrincipal)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"storageBackendObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.Name != nil && filter.Type == nil && filter.Principal == nil && filter.ModelUUID == nil {
			args = append(args, []any{filter.Name}...)
			if len(filters) == 1 {
				sqlStmt, err = cluster.Stmt(tx, storageBackendObjectsByName)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"storageBackendObjectsByName\" prepared statement: %w", err)
				}

				break
			}

			query, err := cluster.StmtString(storageBackendObjectsByName)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"storageBackendObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.ModelUUID != nil && filter.Name == nil && filter.Type == nil && filter.Principal == nil {
			args = append(args, []any{filter.ModelUUID}...)
			if len(filters) == 1 {
				sqlStmt, err = cluster.Stmt(tx, storageBackendObjectsByModelUUID)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"storageBackendObjectsByModelUUID\" prepared statement: %w", err)
				}

				break
			}

			query, err := cluster.StmtString(storageBackendObjectsByModelUUID)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"storageBackendObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.Name == nil && filter.Type == nil && filter.Principal == nil && filter.ModelUUID == nil {
			return nil, fmt.Errorf("Cannot filter on empty StorageBackendFilter")
		} else {
			return nil, fmt.Errorf("No statement exists for the given Filter")
		}
	}

	// Select.
	if sqlStmt != nil {
		objects, err = getStorageBackends(ctx, sqlStmt, args...)
	} else {
		queryStr := strings.Join(queryParts[:], "ORDER BY")
		objects, err = getStorageBackendsRaw(ctx, tx, queryStr, args...)
	}

	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"storage_backends\" table: %w", err)
	}

	return objects, nil
}

// GetStorageBackend returns the StorageBackend with the given key.
// generator: StorageBackend GetOne
func GetStorageBackend(ctx context.Context, tx *sql.Tx, name string) (*StorageBackend, error) {
	filter := StorageBackendFilter{}
	filter.Name = &name

	objects, err := GetStorageBackends(ctx, tx, filter)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"storage_backends\" table: %w", err)
	}

	switch len(objects) {
	case 0:
		return nil, api.StatusErrorf(http.StatusNotFound, "StorageBackend not found")
	case 1:
		return &objects[0], nil
	default:
		return nil, fmt.Errorf("More than one \"storage_backends\" entry matches")
	}
}

// GetStorageBackendID return the ID of the StorageBackend with the given key.
// generator: StorageBackend ID
func GetStorageBackendID(ctx context.Context, tx *sql.Tx, name string) (int64, error) {
	stmt, err := cluster.Stmt(tx, storageBackendID)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"storageBackendID\" prepared statement: %w", err)
	}

	row := stmt.QueryRowContext(ctx, name)
	var id int64
	err = row.Scan(&id)
	if errors.Is(err, sql.ErrNoRows) {
		return -1, api.StatusErrorf(http.StatusNotFound, "StorageBackend not found")
	}

	if err != nil {
		return -1, fmt.Errorf("Failed to get \"storage_backends\" ID: %w", err)
	}

	return id, nil
}

// StorageBackendExists checks if a StorageBackend with the given key exists.
// generator: StorageBackend Exists
func StorageBackendExists(ctx context.Context, tx *sql.Tx, name string) (bool, error) {
	_, err := GetStorageBackendID(ctx, tx, name)
	if err != nil {
		if api.StatusErrorCheck(err, http.StatusNotFound) {
			return false, nil
		}

		return false, err
	}

	return true, nil
}

// CreateStorageBackend adds a new StorageBackend to the database.
// generator: StorageBackend Create
func CreateStorageBackend(ctx context.Context, tx *sql.Tx, object StorageBackend) (int64, error) {
	// Check if a StorageBackend with the same key exists.
	exists, err := StorageBackendExists(ctx, tx, object.Name)
	if err != nil {
		return -1, fmt.Errorf("Failed to check for duplicates: %w", err)
	}

	if exists {
		return -1, api.StatusErrorf(http.StatusConflict, "This \"storage_backends\" entry already exists")
	}

	args := make([]any, 5)

	// Populate the statement arguments.
	args[0] = object.Name
	args[1] = object.Type
	args[2] = object.Config
	args[3] = object.Principal
	args[4] = object.ModelUUID

	// Prepared statement to use.
	stmt, err := cluster.Stmt(tx, storageBackendCreate)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"storageBackendCreate\" prepared statement: %w", err)
	}

	// Execute the statement.
	result, err := stmt.Exec(args...)
	if err != nil {
		return -1, fmt.Errorf("Failed to create \"storage_backends\" entry: %w", err)
	}

	id, err := result.LastInsertId()
	if err != nil {
		return -1, fmt.Errorf("Failed to fetch \"storage_backends\" entry ID: %w", err)
	}

	return id, nil
}

// DeleteStorageBackend deletes the StorageBackend matching the given key parameters.
// generator: StorageBackend DeleteOne-by-Name
func DeleteStorageBackend(_ context.Context, tx *sql.Tx, name string) error {
	stmt, err := cluster.Stmt(tx, storageBackendDeleteByName)
	if err != nil {
		return fmt.Errorf("Failed to get \"storageBackendDeleteByName\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(name)
	if err != nil {
		return fmt.Errorf("Delete \"storage_backends\": %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n == 0 {
		return api.StatusErrorf(http.StatusNotFound, "StorageBackend not found")
	} else if n > 1 {
		return fmt.Errorf("Query deleted %d StorageBackend rows instead of 1", n)
	}

	return nil
}

// UpdateStorageBackend updates the StorageBackend matching the given key parameters.
// generator: StorageBackend Update
func UpdateStorageBackend(ctx context.Context, tx *sql.Tx, name string, object StorageBackend) error {
	id, err := GetStorageBackendID(ctx, tx, name)
	if err != nil {
		return err
	}

	stmt, err := cluster.Stmt(tx, storageBackendUpdate)
	if err != nil {
		return fmt.Errorf("Failed to get \"storageBackendUpdate\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(object.Name, object.Type, object.Config, object.Principal, object.ModelUUID, id)
	if err != nil {
		return fmt.Errorf("Update \"storage_backends\" entry failed: %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n != 1 {
		return fmt.Errorf("Query updated %d rows instead of 1", n)
	}

	return nil
}
