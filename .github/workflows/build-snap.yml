name: Build Snap

on:
  workflow_call:
    outputs:
      snap:
        description: "Filename of the built snap artifact"
        value: local-${{ jobs.build.outputs.snap }}

  schedule:
    - cron: '22 4 */2 * *'

jobs:
  build:
    name: Build snap
    runs-on: ubuntu-latest
    outputs:
      snap: ${{ steps.snapcraft.outputs.snap }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build snap locally
        uses: canonical/action-build@v1.3.0
        id: snapcraft

      - name: Upload locally built snap artifact
        uses: actions/upload-artifact@v4
        with:
          name: local-${{ steps.snapcraft.outputs.snap }}
          path: ${{ steps.snapcraft.outputs.snap }}

  functional-test:
    needs: build
    name: Functional test
    runs-on: [self-hosted, large, noble, x64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download snap artifact
        id: download
        uses: actions/download-artifact@v4
        with:
          name: local-${{ needs.build.outputs.snap }}
      - name: test
        run: |
          ./testing/test-standalone.sh local-${{ needs.build.outputs.snap }}
      - name: Collect logs
        if: always()
        run: |
          kubectl="k8s kubectl"
          mkdir -p logs
          cp -rf $HOME/snap/openstack/common/logs/*.log logs/
          models=$(juju models --format json | jq -r .models[].name)
          for model in $models;
          do
            name=$(echo $model | cut -d/ -f2);
            juju status -m $model -o logs/$name.yaml;
            cat logs/$name.yaml;
            juju debug-log -m $model --replay &> logs/$name-debug-log.txt || echo "Not able to get logs for model $model"
            for pod in $(sudo $kubectl get pods -n $name -o=jsonpath='{.items[*].metadata.name}');
            do
              sudo $kubectl logs --ignore-errors -n $name --all-containers $pod &> logs/$pod.log || echo "Not able to get log for $pod"
            done
            sudo $kubectl -n $name get po -o yaml &> logs/$name-po.yaml
            sudo $kubectl -n $name get pvc -o yaml &> logs/$name-pvc.yaml
            sudo k8s kubectl -n $name get CSIStorageCapacity -o yaml &> logs/$name-storage-capacity.yaml
          done
          sudo $kubectl get pv -o yaml &> logs/pv.yaml
          sudo $kubectl get nodes -o yaml &> logs/nodes.yaml
          sudo k8s kubectl -n kube-system get CSIStorageCapacity -o yaml &> logs/storage-capacity.yaml

          sudo df -h &> logs/df_h.txt
          # if test -f tempest_validation.log; then cp tempest_validation.log logs/; fi
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sunbeam_logs
          path: logs
          retention-days: 30
      - name: Setup tmate session
        if: ${{ failure() && runner.debug }}
        uses: canonical/action-tmate@main
  functional-test-maas:
    needs: build
    name: Functional test on MAAS
    runs-on: [self-hosted, self-hosted-linux-amd64-noble-private-endpoint-medium]
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          path: repository
      - name: Download snap artifact
        id: download
        uses: actions/download-artifact@v5
        with:
          name: local-${{ needs.build.outputs.snap }}
          path: repository
      - name: Pack the repository
        run: |
          tar acf repository.tar.gz repository/
      - name: Submit job
        uses: canonical/testflinger/.github/actions/submit@main
        with:
          poll: true
          job: |
            job_queue: openstack
            provision_data:
              distro: noble
            global_timeout: 14400  # 4 hours
            output_timeout: 5400  # 90 min
            test_data:
              attachments:
                - local: repository.tar.gz
              test_cmds: |
                set -ex
                scp ./attachments/test/repository.tar.gz "ubuntu@${DEVICE_IP}:"
                if ssh "ubuntu@${DEVICE_IP}" '
                    set -ex
                    # LP: #2093303
                    sudo mv -v /etc/apt/sources.list{,.bak}
                    sudo apt-get update
                    # include ~/.local/bin in PATH
                    source  ~/.profile
                    set -o pipefail
                    # LP: #2097451
                    # LP: #2102175
                    tar xf repository.tar.gz
                    cd repository/testing/
                    ./install_deps.sh
                    ./deploy.sh
                    cd ../
                    ./testing/test-multinode-maas.sh local-${{ needs.build.outputs.snap }}
                '; then
                    scp -r "ubuntu@${DEVICE_IP}:repository/artifacts/" artifacts/ || true
                    find artifacts/
                else
                    scp -r "ubuntu@${DEVICE_IP}:repository/artifacts/" artifacts/ || true
                    find artifacts/
                    exit 1
                fi
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sunbeam_logs
          path: logs
          retention-days: 30
      - name: Setup tmate session
        if: ${{ failure() && runner.debug }}
        uses: canonical/action-tmate@main
